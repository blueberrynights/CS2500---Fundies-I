#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 75 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 21 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1           0 2485 0 17 3 85
(4
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(5
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 24 29 1 #"\n"
0 0 26 3 7 #"#reader"
0 0 24 3 1 #"("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 36 #"\"htdp-intermediate-lambda-reader.ss\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"lang\""
0 0 24 3 3 #")(("
0 0 14 3 7 #"modname"
0 0 24 3 1 #" "
0 0 14 3 9 #"homework9"
0 0 24 3 3 #") ("
0 0 14 3 19 #"read-case-sensitive"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #") ("
0 0 14 3 10 #"teachpacks"
0 0 24 3 6 #" ()) ("
0 0 14 3 13 #"htdp-settings"
0 0 24 3 3 #" #("
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 11 #"constructor"
0 0 24 3 1 #" "
0 0 14 3 17 #"repeating-decimal"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 4 #"none"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";; Anna Yang & Sarah Tong"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Homework 9"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 1:"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; scalar-matrix: Number Number -> [List-of [List-of Numbers]]"
0 0 24 29 1 #"\n"
0 0 17 3 83
(6
 #"; takes in 2 given numbers and produces a matrix where the diagonal "
 #"entries are the"
) 0 0 24 29 1 #"\n"
0 0 17 3 49 #"; second given number and all other entries are 0"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-matrix1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 14 3 10 #"ex-matrix1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 46 #"; create-row-list: Number -> [List-of Numbers]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 62
#"; takes in the index of a list and returns a [List-of Numbers]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"create-row-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 38 #"; determine-diagonal: Number -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 92
(7
 #"; if the list-index is equal to the row-index (diagonal position) pr"
 #"oduces k, else returns 0"
) 0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"determine-diagonal"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 2 #") "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 18 #"determine-diagonal"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 15 #"create-row-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 2:"
0 0 24 29 1 #"\n"
0 0 17 3 65
#"; diagonal-matrix: Number Function -> [List-of [List-of Numbers]]"
0 0 24 29 1 #"\n"
0 0 17 3 85
(8
 #"; takes in a Number and Function and produces a matrix where the dia"
 #"gonal entries are"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #"; generated by the Function"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-index"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 4 #"))) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-index"
0 0 24 3 3 #") ("
0 0 14 3 4 #"add1"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 79
(9
 #"                                                                    "
 #"          ("
) 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 79 9 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-index"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 78
(10
 #"                                                                    "
 #"         ("
) 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 78 10 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-index"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 5 #"))) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 79 9 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 79 9 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 79 9 0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 46 #"; create-row-list: Number -> [List-of Numbers]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 62
#"; takes in the index of a list and returns a [List-of Numbers]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"create-row-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 38 #"; determine-diagonal: Number -> Number"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 86
(11
 #"; when list-index is equal to the row-index (diagonal position), app"
 #"lies function f to"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 32 #"; row-index, otherwise returns 0"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 5 #"local"
0 0 24 3 3 #" (("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"determine-diagonal"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 3 #") ("
0 0 14 3 1 #"f"
0 0 24 3 1 #" "
0 0 14 3 9 #"row-index"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 18 #"determine-diagonal"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"build-list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 15 #"create-row-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 3:"
0 0 24 29 1 #"\n"
0 0 17 3 64
#"; scalar-matrix/v2: Number Number -> [List-of [List-of Numbers]]"
0 0 24 29 1 #"\n"
0 0 17 3 90
(12
 #"; takes in 2 given numbers and uses diagona-matrix to produces a mat"
 #"rix where the diagonal"
) 0 0 24 29 1 #"\n"
0 0 17 3 66
#"; entries are the second given number and all other entries are 0 "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 16 #"scalar-matrix/v2"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"diagonal-matrix"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"row-index"
0 0 24 3 2 #") "
0 0 14 3 1 #"k"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 4:"
0 0 24 29 1 #"\n"
0 0 17 3 66
#"; matrix->string: [List-of [List-of Numbers]] -> [List-of Strings]"
0 0 24 29 1 #"\n"
0 0 17 3 76
(13
 #"; takes in a matrix and produces a [List-of Strings] representing th"
 #"e matrix"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-matrix1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                                "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                                "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                         "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 2 #" ("
0 0 14 3 13 #"scalar-matrix"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                         "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                         "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 29 1 #"\n"
0 0 24 3 57 #"                                                         "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 1 #" "
0 0 14 3 5 #"lolon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lolon"
0 0 24 3 2 #") "
0 0 14 3 5 #"empty"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lolon"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 14 #"number->string"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 5 #"lolon"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 3 #") ("
0 0 14 3 14 #"matrix->string"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 5 #"lolon"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 5"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"person"
0 0 24 3 2 #" ["
0 0 14 3 4 #"name"
0 0 24 3 1 #" "
0 0 14 3 3 #"yob"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent1"
0 0 24 3 1 #" "
0 0 14 3 7 #"parent2"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";; A FamilyTree is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; - \"unknown\""
0 0 24 29 1 #"\n"
0 0 17 3 55 #";; - (make-person String Natural FamilyTree FamilyTree)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; EXAMPLES"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-1"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-2"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-3"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"Natalie\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1950"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-4"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-5"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Dave\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1975"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-4"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-6"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"unknown\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-7"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"John\""
0 0 24 3 1 #" "
0 0 21 3 4 #"2000"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-5"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-6"
0 0 24 3 3 #")) "
0 0 17 3 44 #"; John is younger than Dave (John's parent1)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-8"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"Will\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1900"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-5"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-6"
0 0 24 3 3 #")) "
0 0 17 3 46 #"; Will is older than Dave (Will's parent1) and"
0 0 24 29 1 #"\n"
0 0 17 3 76
(14
 #";                                                   Natalie (Dave's "
 #"parent2)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-9"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-person"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"Sam\""
0 0 24 3 1 #" "
0 0 21 3 4 #"1950"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-5"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-6"
0 0 24 3 3 #")) "
0 0 17 3 49 #"; Sam is the same age as Natalie (Dave's parent2)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; TEMPLATE"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"familytree-temp"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"person?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 3 #") ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 11 #"person-name"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 10 #"person-yob"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 15 #"familytree-temp"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 15 #"familytree-temp"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 6"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; max-age : FamilyTree -> Natural"
0 0 24 29 1 #"\n"
0 0 17 3 98
(15
 #";; takes in a given FamilyTree and returns the maximum age of a pers"
 #"on in the FamilyTree in years,"
) 0 0 24 29 1 #"\n"
0 0 17 3 92
(16
 #";; assuming that everybody was born on January 1st and is still aliv"
 #"e. \"unknown\"'s age is 0."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-1"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-7"
0 0 24 3 2 #") "
0 0 21 3 2 #"70"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-3"
0 0 24 3 2 #") "
0 0 21 3 2 #"70"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-8"
0 0 24 3 2 #") "
0 0 21 3 3 #"120"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-9"
0 0 24 3 2 #") "
0 0 21 3 2 #"70"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"max-age"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        [("
0 0 14 3 7 #"person?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 3 #") ("
0 0 14 3 3 #"max"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 21 3 4 #"2020"
0 0 24 3 2 #" ("
0 0 14 3 10 #"person-yob"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 7 #"max-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 7 #"max-age"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; Exercise 7"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";; valid-ft? : FamilyTree -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 98
(17
 #";; takes in a given FamilyTree and returns whether or not every pers"
 #"on in the tree is younger than"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";; their parents"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-7"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-8"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-9"
0 0 24 3 2 #") "
0 0 21 3 6 #"#false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 4 #"ft-1"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 24 3 1 #" "
0 0 17 3 37 #"; younger? : person person -> Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 88
(18
 #"; takes in a child and a parent and returns whether the child is you"
 #"nger than the parent"
) 0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"younger?"
0 0 24 3 1 #" "
0 0 14 3 5 #"child"
0 0 24 3 1 #" "
0 0 14 3 6 #"parent"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 6 #"parent"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 10 #"person-yob"
0 0 24 3 1 #" "
0 0 14 3 5 #"child"
0 0 24 3 3 #") ("
0 0 14 3 10 #"person-yob"
0 0 24 3 1 #" "
0 0 14 3 6 #"parent"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #") "
0 0 21 3 5 #"#true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 7 #"person?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"younger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 8 #"younger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                            ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent1"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 9 #"valid-ft?"
0 0 24 3 2 #" ("
0 0 14 3 14 #"person-parent2"
0 0 24 3 1 #" "
0 0 14 3 2 #"ft"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 21 3 6 #"#false"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 8:"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"lego"
0 0 24 3 2 #" ("
0 0 14 3 5 #"label"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #" "
0 0 14 3 5 #"width"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #"; A Lego is a (make-lego String String Number)"
0 0 24 29 1 #"\n"
0 0 17 3 51 #"; Interpretation: (make-lego l c w) is a lego brick"
0 0 24 29 1 #"\n"
0 0 17 3 57 #"; with a label _l_, color _c_, and width _w_ (in pixels)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lego-temp"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-label"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-width"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 6 #"bigger"
0 0 24 3 2 #" ("
0 0 14 3 4 #"lego"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; A LegoBldg (lego building) is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; - Lego"
0 0 24 29 1 #"\n"
0 0 17 3 40 #"; - (make-bigger Lego LegoBldg LegoBldg)"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; Interpretation: (make-bigger l lft rgt) makes a bigger"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; lego building by putting a lego brick _l_ on top of two lego"
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; buildings _lft_ (left) and _rgt_ (right)."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-temp"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 9 #"lego-temp"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #") ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 9 #"lego-temp"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"bigger-temp"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 11 #"bigger-temp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 3 #")) "
0 0 14 3 3 #"..."
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego1"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"white\""
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego2"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego3"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego4"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego5"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego6"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego7"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger3"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger2"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego1"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego2"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego3"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego1"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego5"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego5"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego6"
0 0 24 3 1 #" "
0 0 14 3 8 #"ex-lego7"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"purple\""
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"7\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #"; count-bricks: LegoBldg -> Natural"
0 0 24 29 1 #"\n"
0 0 17 3 92
(19
 #"; takes in a lego building and returns a number representing the tot"
 #"al number of lego bricks"
) 0 0 24 29 1 #"\n"
0 0 17 3 18 #"; in that building"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger3"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger2"
0 0 24 3 2 #") "
0 0 21 3 1 #"9"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 2 #") "
0 0 21 3 1 #"7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger4"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 12 #"count-bricks"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 6 #")))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";; Exercise 9:"
0 0 24 29 1 #"\n"
0 0 17 3 31 #"; how-high: LegoBldg -> Natural"
0 0 24 29 1 #"\n"
0 0 17 3 86
(20
 #"; takes in a lego building and returns the total height of the lego "
 #"building in pixels"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; where each lego brick is 10 pixels tall"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger3"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 2 #") "
0 0 21 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger4"
0 0 24 3 2 #") "
0 0 21 3 2 #"30"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #")) "
0 0 17 3 4 #";nat"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"10"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"how-high"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 8 #"how-high"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"10"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 8 #"how-high"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 10:"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; contains-colored-brick?: LegoBldg String -> Boolean"
0 0 24 29 1 #"\n"
0 0 17 3 92
(21
 #"; takes in a lego building and color as a String and returns whether"
 #" the building contains a"
) 0 0 24 29 1 #"\n"
0 0 17 3 39 #"; lego brick of that color as a Boolean"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger2"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 23 #"contains-colored-brick?"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 5 #"))]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";; Exercise 11:"
0 0 24 29 1 #"\n"
0 0 17 3 50 #"; find-colored-brick: LegoBldg String -> MaybeLego"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; A MaybeLego is one of:"
0 0 24 29 1 #"\n"
0 0 17 3 10 #"; - #false"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; - Lego"
0 0 24 29 1 #"\n"
0 0 17 3 93
(22
 #"; takes in a lego building and color as a String and returns a the f"
 #"irst lego found the is in"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(23
 #"; the given color in the building, if no such lego found, returns fa"
 #"lse"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 2 #") "
0 0 14 3 8 #"ex-lego7"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger3"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger2"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pink\""
0 0 24 3 2 #") "
0 0 14 3 8 #"ex-lego2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"green\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 3 #") ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #" "
0 0 14 3 5 #"color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 8 #"string=?"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 3 #")) "
0 0 14 3 2 #"lb"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 5 #"lego?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 4 #")) ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 5 #"lego?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 5 #"lego?"
0 0 24 3 2 #" ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 18 #"find-colored-brick"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #") "
0 0 14 3 5 #"color"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"])]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";; Exercise 12: "
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; lb->image: LegoBldg -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 61
#"; takes a lego building and produces an image of the building"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger4"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"4\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"purple\""
0 0 24 3 1 #" "
0 0 21 3 2 #"80"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 11 #"make-bigger"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"blue\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"yellow\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 24 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 24 3 1 #" "
0 0 21 3 2 #"40"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 9 #"make-lego"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"6\""
0 0 24 3 1 #" "
0 0 19 3 8 #"\"orange\""
0 0 24 3 1 #" "
0 0 21 3 2 #"60"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger4"
0 0 24 3 2 #") "
0 6           4 21 1297
(24
 #"(#(struct:overlay #(struct:translate 30 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 80 0 0 0) #(struct:pulled-point 0 0 80 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) 255 \"purple\"))) #(struct:translate 0 10 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"b"
 #"lue\"))) #(struct:translate 0 10 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 40 10 0 0) #(struct:pulled"
 #"-point 0 0 0 10 0 0)) 255 \"yellow\"))) #(struct:translate 40 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40"
 #" 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(s"
 #"truct:translate 80 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(s"
 #"truct:pulled-point 0 0 60 10 0 0) #(struct:pulled-point 0 0 0 10 0 0"
 #")) 255 \"orange\")))))) #(struct:bb 140 30 30) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger3"
0 0 24 3 2 #") "
0 6           4 21 225
(25
 #"(#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0"
 #" 0 40 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"pink\")) #("
 #"struct:bb 40 10 10) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 98
(26
 #";note: there are white legos in ex-bigger2 which is why it looks emp"
 #"ty but there's actually legos "
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger2"
0 0 24 3 2 #") "
0 6           4 21 2357
(27
 #"(#(struct:overlay #(struct:translate 70 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 80 0 0 0) #(struct:pulled-point 0 0 80 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) 255 \"white\"))) #(struct:translate 0 10 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 40 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-p"
 #"oint 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulle"
 #"d-point 0 0 60 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"pi"
 #"nk\"))) #(struct:translate 0 10 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-poin"
 #"t 0 0 40 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"pink\"))"
 #") #(struct:translate 40 0 #(struct:overlay #(struct:translate 10 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 80 0 0 0) #(struct:pulled-point 0 0"
 #" 80 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"white\"))) #("
 #"struct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 60 1"
 #"0 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))) #(struct:"
 #"translate 60 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pul"
 #"led-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:"
 #"pulled-point 0 0 40 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255"
 #" \"red\"))))))))))) #(struct:translate 140 0 #(struct:overlay #(stru"
 #"ct:translate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:"
 #"pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(stru"
 #"ct:pulled-point 0 0 60 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) "
 #"255 \"red\"))) #(struct:translate 0 10 #(struct:overlay #(struct:tra"
 #"nslate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pull"
 #"ed-point 0 0 40 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"r"
 #"ed\"))) #(struct:translate 40 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40"
 #" 0 0 0) #(struct:pulled-point 0 0 40 10 0 0) #(struct:pulled-point 0"
 #" 0 0 10 0 0)) 255 \"pink\")))))))))) #(struct:bb 220 40 40) #f)"
) 0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 10 #"ex-bigger1"
0 0 24 3 2 #") "
0 6           4 21 1830
(28
 #"(#(struct:overlay #(struct:translate 40 0 #(struct:translate 0 0 #(s"
 #"truct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-po"
 #"int 0 0 80 0 0 0) #(struct:pulled-point 0 0 80 10 0 0) #(struct:pull"
 #"ed-point 0 0 0 10 0 0)) 255 \"purple\"))) #(struct:translate 0 10 #("
 #"struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:tran"
 #"slate 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-"
 #"point 0 0 0 0 0 0) #(struct:pulled-point 0 0 60 0 0 0) #(struct:pull"
 #"ed-point 0 0 60 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"b"
 #"lue\"))) #(struct:translate 0 10 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 40 10 0 0) #(struct:pulled"
 #"-point 0 0 0 10 0 0)) 255 \"yellow\"))) #(struct:translate 40 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40"
 #" 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"red\"))))))) #(s"
 #"truct:translate 80 0 #(struct:overlay #(struct:translate 10 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 60 0 0 0) #(struct:pulled-point 0 0 60 1"
 #"0 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"orange\"))) #(stru"
 #"ct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:t"
 #"ranslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #("
 #"struct:pulled-point 0 0 40 0 0 0) #(struct:pulled-point 0 0 40 10 0 "
 #"0) #(struct:pulled-point 0 0 0 10 0 0)) 255 \"green\"))) #(struct:tr"
 #"anslate 40 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulle"
 #"d-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 40 0 0 0) #(struct:pu"
 #"lled-point 0 0 40 10 0 0) #(struct"
 #":pulled-point 0 0 0 10 0 0)) 255 \"red\")))))))))) #(struct:bb 160 3"
 #"0 30) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"lego?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 7 #"bigger?"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 3 #") ("
0 0 14 3 11 #"above/align"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"center\""
0 0 24 3 3 #"  ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-lego"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 12 #"beside/align"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"top\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"lb->image"
0 0 24 3 2 #" ("
0 0 14 3 11 #"bigger-left"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 9 #"lb->image"
0 0 24 3 2 #" ("
0 0 14 3 12 #"bigger-right"
0 0 24 3 1 #" "
0 0 14 3 2 #"lb"
0 0 24 3 7 #"))))]))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #"; draw-lego: lego -> Image"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; takes "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"draw-lego"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-width"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"lego-color"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0           0
